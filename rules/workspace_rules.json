{
    "prefixes": {
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "xsd" : "http://www.w3.org/2001/XMLSchema#",
        "time": "http://www.w3.org/2006/time#",
        "core": "https://raw.githubusercontent.com/VCityTeam/UD-Graph/master/Ontologies/CityGML/3.0/core#",
        "vers": "https://raw.githubusercontent.com/VCityTeam/UD-Graph/master/Ontologies/CityGML/3.0/versioning#",
        "wksp": "https://raw.githubusercontent.com/VCityTeam/UD-Graph/master/Ontologies/Workspace/3.0/workspace#",
        "type": "https://raw.githubusercontent.com/VCityTeam/UD-Graph/master/Ontologies/Workspace/3.0/transactiontype#",
        "doc" : "https://raw.githubusercontent.com/VCityTeam/UD-Graph/master/Ontologies/Document/3.0/document#"
    },
    "rules": [
        {   
            "comment": "14a",
            "rule": "core:AbstractFeatureWithLifespan(?f), core:AbstractFeatureWithLifespan.validFrom(?f, ?v1), core:AbstractFeatureWithLifespan.validFrom(?f, ?v2)-> lessThanOrEqual(?v1, ?v2)"
        },
        {   
            "comment": "14b",
            "rule": "core:AbstractFeatureWithLifespan(?f), core:AbstractFeatureWithLifespan.creationDate(?f, ?e1), core:AbstractFeatureWithLifespan.terminationDate(?f, ?e2) -> lessThanOrEqual(?e1, ?e2)"
        },
        {
            "comment": "22",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:insert) -> empty(?f1), core:AbstractFeatureWithLifespan(?f2)"
        },
        {
            "comment": "23",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:delete) -> core:AbstractFeatureWithLifespan(?f1), empty(?f2)"
        },
        {
            "ignore": true,
            "comment": "24",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:replace), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2)"
        },
        {
            "comment": "24-unchanged; although feature ids can be unchanged between source datasets, they must be unique to a single graph and are prefixed during the versioning process, checking for this may not be systematically possible without knowing how feature ids are prefixed. Therefore the proposed SWRL rule for validating type:unchanged transactions will be identical to a type:replace",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:unchanged), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2)"
        },
        {
            "comment": "24-reided",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:re-ided), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeature.featureID(?f1, ?i1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeature.featureID(?f2, ?i2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2), notEqual(?i1, ?i2)"
        },
        {
            "comment": "24-modified; currently verifying 3D geometric changes is not feasible and so the rule for verifying type:modified transactions is identical to the rule for verifying type:re-ided transactions",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:modified), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeature.featureID(?f1, ?i1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeature.featureID(?f2, ?i2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2), notEqual(?i1, ?i2)"
        },
        {
            "comment": "24-fused; how can we verify the cardinality of the existence of multiple transactions with the same vers:newFeature and different vers:oldFeatures is more than 1?",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:fused), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2)"
        },
        {
            "comment": "24-subdivided; how can we verify the cardinality of the existence of multiple transactions with the same vers:oldFeature and different vers:newFeatures is more than 1?",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), vers:Transaction.oldFeature(?t, ?f1), vers:Transaction.newFeature(?t, ?f2), equal(?y, type:subdivided), core:AbstractFeatureWithLifespan(?f1), core:AbstractFeatureWithLifespan.validTo(?f1, ?d1), core:AbstractFeatureWithLifespan(?f2), core:AbstractFeatureWithLifespan.validFrom(?f2, ?d2) -> lessThanOrEqual(?d1, ?d2)"
        },
        {
            "comment": "27",
            "rule": "vers:Version(?v), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), core:AbstractFeatureWithLifespan.validFrom(?v, ?vv1), core:AbstractFeatureWithLifespan.validTo(?v, ?vv2), core:AbstractFeatureWithLifespan.validFrom(?f, ?vf1), core:AbstractFeatureWithLifespan.validTo(?f, ?vf2) -> lessThanOrEqual(?vf1, ?vv1), greaterThanOrEqual(?vf2, ?vv2)"
        },
        {
            "comment": "30",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2), vers:Version(?v1), core:AbstractFeatureWithLifespan.validTo(?v1, ?t1), vers:Version(?v2), core:AbstractFeatureWithLifespan.validFrom(?v2, ?t2), -> lessThanOrEqual(?t1, ?t2)"
        },
        {
            "comment": "31",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2), vers:Version(?v1), core:AbstractFeatureWithLifespan.validTo(?v1, ?t1), vers:Version(?v2), core:AbstractFeatureWithLifespan.validFrom(?v2, ?t2), -> lessThanOrEqual(?t1, ?t2)"
        },
        {
            "comment": "35",
            "rule": "wksp:Scenario(?s), wksp:Scenario.versionTransitionMember(?s, ?vt), vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2) -> wksp:Scenario.versionMember(?s, ?v1), wksp:Scenario.versionMember(?s, ?v2)"
        },
        {
            "comment": "36",
            "rule": "wksp:Scenario(?s), wksp:Scenario.versionMember(?s, ?v1), vers:Version(?v1), wksp:Scenario.versionMember(?s, ?v2), vers:Version(?v2) -> vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2)"
        },
        {
            "comment": "",
            "rule": "wksp:ConcensusSpace(?c), wksp:Space.scenarioMember(?c, ?s) -> wksp:Scenario(?s)"
        }
    ]
}