{
    "ontologies": [
        "https://raw.githubusercontent.com/w3c/sdw/gh-pages/time/rdf/time.nt",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Time/time-extension.owl",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/CityGML/3.0/core.owl",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/CityGML/3.0/versioning.owl",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Workspace/3.0/workspace.owl",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Workspace/3.0/transactiontype.owl",
        "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Document/3.0/document.owl"
    ],
    "prefixes": {
        "owl": "http://www.w3.org/2002/07/owl#",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
        "xsd" : "http://www.w3.org/2001/XMLSchema#",
        "swrl": "http://www.w3.org/2003/11/swrl#",
        "skos": "http://www.w3.org/2004/02/skos/core#",
        "geo": "http://www.opengis.net/ont/geosparql#",
        "time": "http://www.w3.org/2006/time#",
        "time_ext": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Time/time-extension#",
        "core": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/CityGML/3.0/core#",
        "bldg": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/CityGML/3.0/building#",
        "vers": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/CityGML/3.0/versioning#",
        "wksp": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Workspace/3.0/workspace#",
        "type": "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Workspace/3.0/transactiontype#",
        "doc" : "https://dataset-dl.liris.cnrs.fr/rdf-owl-urban-data-ontologies/Ontologies/Document/3.0/document#"
    },
    "rules": [
        {
            "title": "beginning and end",
            "description": "infer that a TemporalEntity begins before it ends",
            "rule": "time:TemporalEntity(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), greaterThan(?t1, ?t2) -> owl:Nothing(?a)"
        },
        {
            "title": "before and after",
            "description": "infer that two TemporalEntities are before and after one another",
            "rule": "time:hasEnd(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasBeginning(?b, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), lessThan(?t1, ?t2) -> time:before(?a, ?b)"
        },
        {
            "title": "Instant",
            "description": "infer that a TemporalEntity is an Instant (i.e. has the same beginning and end)",
            "rule": "time:TemporalEntity(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), equal(?t1, ?t2) -> time:Instant(?a), time:inXSDDateTimeStamp(?a, ?t1)"
        },
        {
            "title": "ProperInterval",
            "description": "infer that a TemporalEntity is a ProperInterval (i.e. has a different beginning and end)",
            "rule": "time:TemporalEntity(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), lessThan(?t1, ?t2) -> time:ProperInterval(?a)"
        },
        {
            "title": "Instant-Interval Starts",
            "description": "infer that an instant starts an interval (i.e. the instant has the same beginning and end as the beginning of the interval)",
            "rule": "time:Instant(?a), time:inXSDDateTimeStamp(?a, ?t1), time:ProperInterval(?b), time:hasBeginning(?b, ?i), time:Instant(?i), time:inXSDDateTimeStamp(?i, ?t2), equal(?t1, ?t2) -> time_ext:starts(?a, ?b)"
        },
        {
            "title": "Instant-Interval Finishes",
            "description": "infer that an instant starts an interval (i.e. the instant has the same beginning and end as the beginning of the interval)",
            "rule": "time:Instant(?a), time:inXSDDateTimeStamp(?a, ?t1), time:ProperInterval(?b), time:hasEnd(?b, ?i), time:Instant(?i), time:inXSDDateTimeStamp(?i, ?t2), equal(?t1, ?t2) -> time_ext:finishes(?a, ?b)"
        },
        {
            "title": "Instant-Instant Equals",
            "description": "infer that an instant equals an instant (i.e. the instant has the same beginning and end as the beginning of the instant)",
            "rule": "time:Instant(?a), time:inXSDDateTimeStamp(?a, ?t1), time:Instant(?b), time:inXSDDateTimeStamp(?b, ?t2), equal(?t1, ?t2) -> time_ext:equals(?a, ?b)"
        },
        {
            "title": "interval before",
            "description": "infer that two ProperIntervals are before and after one another",
            "rule": "time:ProperInterval(?a), time:hasEnd(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:ProperInterval(?b), time:hasBeginning(?b, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), lessThan(?t1, ?t2) -> time:intervalBefore(?a, ?b)"
        },
        {
            "title": "interval equals",
            "description": "infer that two ProperIntervals are equal",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), equal(?t1, ?t3), equal(?t2, ?t4) -> time:intervalEquals(?a, ?b)"
        },
        {
            "title": "interval overlaps",
            "description": "infer that two ProperIntervals overlap",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), lessThan(?t1, ?t3), lessThan(?t2, ?t4), greaterThan(?t2, ?t3) -> time:intervalOverlaps(?a, ?b)"
        },
        {
            "title": "interval meets",
            "description": "infer that two ProperIntervals meet",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), equal(?t2, ?t3) -> time:intervalMeets(?a, ?b)"
        },
        {
            "title": "interval during",
            "description": "infer that a ProperInterval is during another",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), greaterThan(?t1, ?t3), lessThan(?t2, ?t4) -> time:intervalDuring(?a, ?b)"
        },
        {
            "title": "interval starts",
            "description": "infer that a ProperInterval starts another",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), equal(?t1, ?t3), lessThan(?t2, ?t4) -> time:intervalStarts(?a, ?b)"
        },
        {
            "title": "interval finishes",
            "description": "infer that a ProperInterval starts another",
            "rule": "time:ProperInterval(?a), time:hasBeginning(?a, ?i1), time:Instant(?i1), time:inXSDDateTimeStamp(?i1, ?t1), time:hasEnd(?a, ?i2), time:Instant(?i2), time:inXSDDateTimeStamp(?i2, ?t2), time:ProperInterval(?b), time:hasBeginning(?b, ?i3), time:Instant(?i3), time:inXSDDateTimeStamp(?i3, ?t3), time:hasEnd(?b, ?i4), time:Instant(?i4), time:inXSDDateTimeStamp(?i4, ?t4), equal(?t2, ?t4), greaterThan(?t1, ?t3) -> time:intervalFinishes(?a, ?b)"
        },
        {   
            "title": "citygml validFrom timestamps match owl-time entities",
            "description": "",
            "comment": "",
            "rule": "core:AbstractFeatureWithLifespan(?f), core:AbstractFeatureWithLifespan.validFrom(?f, ?t1), time_ext:hasExistenceTime(?f, ?te), time:hasBeginning(?te, ?i1), time:inXSDDateTimeStamp(?i1, ?t2), notEqual(?t1, ?t2) -> owl:Nothing(?f)"
        },
        {   
            "title": "citygml validFrom timestamps match owl-time entities",
            "description": "",
            "comment": "",
            "rule": "core:AbstractFeatureWithLifespan(?f), core:AbstractFeatureWithLifespan.validTo(?f, ?t1), time_ext:hasExistenceTime(?f, ?te), time:hasEnd(?te, ?i1), time:inXSDDateTimeStamp(?i1, ?t2), notEqual(?t1, ?t2) -> owl:Nothing(?f)"
        },
        {
            "ignore": true,
            "title": "rule 22 - insert",
            "description": "if a transaction of type insert, it cannot have a newFeature",
            "comment": "skos concepts as individuals do not seem to work with SWRL rules",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), equals(?y, 'insert'), vers:Transaction.oldFeature(?t, ?f) -> owl:Nothing(?t)"
        },
        {
            "ignore": true,
            "title": "rule 23 - delete",
            "description": "if a transaction is of type delete, it cannot have an oldFeature",
            "comment": "skos concepts as individuals do not seem to work with SWRL rules",
            "rule": "vers:Transaction(?t), vers:Transaction.type(?t, ?y), equals(?y, 'delete'), vers:Transaction.oldFeature(?t, ?f) -> owl:Nothing(?t)"
        },
        {
            "title": "rule 27a - version in/equals feature member",
            "description": "a version before with its feature member is inconsistent",
            "comment": "",
            "rule": "vers:Version(?v), time_ext:hasExistenceTime(?v, ?t1), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), time_ext:hasExistenceTime(?f, ?t2), time:after(?t1, ?t2) -> owl:Nothing(?v)"
        },
        {
            "title": "rule 27b - version in/equals feature member",
            "description": "a version after with its feature member is inconsistent",
            "comment": "",
            "rule": "vers:Version(?v), time_ext:hasExistenceTime(?v, ?t1), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), time_ext:hasExistenceTime(?f, ?t2), time:before(?t1, ?t2) -> owl:Nothing(?v)"
        },
        {
            "title": "rule 27c - version in/equals feature member",
            "description": "a feature member in its parent version is inconsistent",
            "comment": "",
            "rule": "vers:Version(?v), time_ext:hasExistenceTime(?v, ?t1), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), time_ext:hasExistenceTime(?f, ?t2), time_ext:in(?t2, ?t1) -> owl:Nothing(?v)"
        },
        {
            "title": "rule 27d - version in/equals feature member",
            "description": "a feature member interval in its parent version is inconsistent",
            "comment": "",
            "rule": "vers:Version(?v), time_ext:hasExistenceTime(?v, ?t1), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), time_ext:hasExistenceTime(?f, ?t2), time:intervalIn(?t2, ?t1) -> owl:Nothing(?v)"
        },
        {
            "title": "rule 27e - version in/equals feature member",
            "description": "a version interval overlaps its feature member is inconsistent",
            "comment": "",
            "rule": "vers:Version(?v), time_ext:hasExistenceTime(?v, ?t1), vers:Version.versionMember(?v, ?f), core:AbstractFeatureWithLifespan(?f), time_ext:hasExistenceTime(?f, ?t2), time:intervalOverlaps(?t1, ?t2) -> owl:Nothing(?v)"
        },
        {
            "title": "rule 31/32a",
            "description": "the versions preceeding and following a versionTransition are respectively before and after one another",
            "comment": "",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2), vers:Version(?v1), time_ext:hasExistenceTime(?v1, ?t1), vers:Version(?v2), time_ext:hasExistenceTime(?v2, ?t2), time:after(?t1, ?t2) -> owl:Nothing(?vt)"
        },
        {
            "title": "rule 31/32b",
            "description": "the versions preceeding and following a versionTransition are respectively before and after one another; and not equal",
            "comment": "",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2), vers:Version(?v1), time_ext:hasExistenceTime(?v1, ?t1), vers:Version(?v2), time_ext:hasExistenceTime(?v2, ?t2), time_ext:equals(?t1, ?t2) -> owl:Nothing(?vt)"
        },
        {
            "title": "rule 31/32c",
            "description": "the versions preceeding and following a versionTransition are respectively before and after one another; and not equal",
            "comment": "",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:VersionTransition.to(?vt, ?v2), vers:Version(?v1), time_ext:hasExistenceTime(?v1, ?t1), vers:Version(?v2), time_ext:hasExistenceTime(?v2, ?t2), time:intervalEquals(?t1, ?t2) -> owl:Nothing(?vt)"
        },
        {
            "title": "rule 33a",
            "description": "the versions preceeding and following a versionTransition meet the versionTransition",
            "comment": "",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.from(?vt, ?v1), vers:Version(?v1), time_ext:hasExistenceTime(?v1, ?i1), time:hasEnd(?i1, ?e), time:inXSDDateTimeStamp(?e, ?t1), time_ext:hasExistenceTime(?vt, ?i2), time:hasBeginning(?i2, ?b), time:inXSDDateTimeStamp(?b, ?t2), notEqual(?t1, ?t2) -> owl:Nothing(?vt)"
        },
        {
            "title": "rule 33b",
            "description": "the versions preceeding and following a versionTransition meet the versionTransition",
            "comment": "",
            "rule": "vers:VersionTransition(?vt), vers:VersionTransition.to(?vt, ?v1), vers:Version(?v1), time_ext:hasExistenceTime(?v1, ?i1), time:hasBeginning(?i1, ?b), time:inXSDDateTimeStamp(?b, ?t1), time_ext:hasExistenceTime(?vt, ?i2), time:hasEnd(?i2, ?e), time:inXSDDateTimeStamp(?e, ?t2), notEqual(?t1, ?t2) -> owl:Nothing(?vt)"
        }
    ]
}